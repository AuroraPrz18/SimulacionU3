/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generador_variables;

import com.csvreader.CsvWriter;
import distribucionesContinuas.*;
import distribucionesDiscretas.*;
import generadorNumeros.CongruencialMixto;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Microcomputadoras-I
 */



public class Generador extends javax.swing.JFrame {
    Font fontSub;
    Font font;
    private Dimension dim;
    private int numDistribucion;
    private int cantPuntos;
    private PoissonRandomVariable poisson;
    private BetaRandomVariables beta;
    private NormalRandomVariable normal;
    private BinomialRandomVariables binomial;
    private HipergeometricaRandomVariables hiperg;
    private UniformeDiscretaRandomVariables uniforme;
    private GammaRandomVariables gamma;
    private GeometricaRandomVariables geometrica;
    private ExponencialRandomVariables exponencial;
    private LognormalRandomVariables logNormal;

    
    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
        lblParametro1.setVisible(false);
        lblParametro2.setVisible(false);
        lblParametro3.setVisible(false);
        txtParametro1.setVisible(false);
        txtParametro2.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion = 0;
        cantPuntos = 4200;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group1 = new javax.swing.ButtonGroup();
        group2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblPoisson = new javax.swing.JLabel();
        lblBinomial = new javax.swing.JLabel();
        lblHiper = new javax.swing.JLabel();
        lblGeometrica = new javax.swing.JLabel();
        lblUniforme = new javax.swing.JLabel();
        lblExpo = new javax.swing.JLabel();
        lblNormal = new javax.swing.JLabel();
        lblLog = new javax.swing.JLabel();
        lblBeta = new javax.swing.JLabel();
        lblGamma = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rbDensidad = new javax.swing.JRadioButton();
        rbAcumulada = new javax.swing.JRadioButton();
        rbInversa = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rb4200 = new javax.swing.JRadioButton();
        rb8000 = new javax.swing.JRadioButton();
        rb10000 = new javax.swing.JRadioButton();
        rb12000 = new javax.swing.JRadioButton();
        btnExportar = new javax.swing.JButton();
        btnGrafica = new javax.swing.JButton();
        pnlGrafica = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblParametro1 = new javax.swing.JLabel();
        txtParametro1 = new javax.swing.JTextField();
        lblParametro2 = new javax.swing.JLabel();
        txtParametro2 = new javax.swing.JTextField();
        lblParametro3 = new javax.swing.JLabel();
        txtParametro3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Generador de variable aleatoria");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Distribuciones Discretas");

        lblPoisson.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblPoisson.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPoisson.setText("• Poisson");
        lblPoisson.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblPoisson.setName(""); // NOI18N
        lblPoisson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPoissonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cambioColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cambioColorExit(evt);
            }
        });

        lblBinomial.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblBinomial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBinomial.setText("• Binomial");
        lblBinomial.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblBinomial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBinomialMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cambioColorBinomial(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cambioColorExitBinomial(evt);
            }
        });

        lblHiper.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblHiper.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHiper.setText("• Hipergeométrica");
        lblHiper.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblHiper.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHiperMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cambiarColorHiper(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cambiarColorExitHiper(evt);
            }
        });

        lblGeometrica.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblGeometrica.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGeometrica.setText("• Geométrica");
        lblGeometrica.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblGeometrica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGeometricaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cambiarColorGeo(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitGeo(evt);
            }
        });

        lblUniforme.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblUniforme.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUniforme.setText("• Uniforme");
        lblUniforme.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblUniforme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUniformeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorPascal(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitPascal(evt);
            }
        });

        lblExpo.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblExpo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblExpo.setText("• Exponencial");
        lblExpo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblExpo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblExpoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorExpo(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitExpo(evt);
            }
        });

        lblNormal.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblNormal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNormal.setText("• Normal");
        lblNormal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblNormal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNormalMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorNormal(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitNormal(evt);
            }
        });

        lblLog.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblLog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLog.setText("• Lognormal");
        lblLog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorLog(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitLog(evt);
            }
        });

        lblBeta.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblBeta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBeta.setText("• Beta");
        lblBeta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblBeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBetaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorBeta(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                colorAgregarExitBeta(evt);
            }
        });

        lblGamma.setFont(new java.awt.Font("Malgun Gothic", 1, 16)); // NOI18N
        lblGamma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGamma.setText("• Gamma");
        lblGamma.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblGamma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGammaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                agregarColorGamma(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                agregarColorExitGamma(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Distribuciones Continuas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPoisson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
            .addComponent(lblBinomial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblHiper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblGeometrica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblUniforme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblExpo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblNormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblBeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblGamma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addComponent(lblPoisson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBinomial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHiper)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblGeometrica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblUniforme)
                .addGap(44, 44, 44)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(lblExpo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNormal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBeta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblGamma)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblPoisson.getAccessibleContext().setAccessibleName("lblPoisson");

        group1.add(rbDensidad);
        rbDensidad.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rbDensidad.setSelected(true);
        rbDensidad.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rbDensidad.setLabel("Densidad");

        group1.add(rbAcumulada);
        rbAcumulada.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rbAcumulada.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rbAcumulada.setLabel("Acumulada");

        group1.add(rbInversa);
        rbInversa.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rbInversa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rbInversa.setLabel("Inversa");

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Cantidad de Puntos de Datos");
        jLabel11.setToolTipText("");

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Tipo de Gráfico");

        group2.add(rb4200);
        rb4200.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rb4200.setSelected(true);
        rb4200.setText("4200");
        rb4200.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb4200MouseClicked(evt);
            }
        });

        group2.add(rb8000);
        rb8000.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rb8000.setText("8000");
        rb8000.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb8000MouseClicked(evt);
            }
        });

        group2.add(rb10000);
        rb10000.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rb10000.setText("10000");
        rb10000.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb10000MouseClicked(evt);
            }
        });

        group2.add(rb12000);
        rb12000.setFont(new java.awt.Font("Eras Medium ITC", 3, 14)); // NOI18N
        rb12000.setText("12000");
        rb12000.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb12000MouseClicked(evt);
            }
        });

        btnExportar.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        btnExportar.setText("Exportar CSV");
        btnExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnGrafica.setFont(new java.awt.Font("Cambria", 1, 13)); // NOI18N
        btnGrafica.setText("Generar");
        btnGrafica.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnGrafica.setMaximumSize(new java.awt.Dimension(105, 23));
        btnGrafica.setMinimumSize(new java.awt.Dimension(105, 23));
        btnGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbInversa)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbDensidad)
                                    .addComponent(rbAcumulada))
                                .addGap(46, 46, 46)
                                .addComponent(btnGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb4200)
                            .addComponent(rb8000))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb10000, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rb12000, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addComponent(btnExportar)))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbDensidad)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rb4200)
                                .addComponent(rb10000)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rb8000)
                                    .addComponent(rb12000)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbAcumulada))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 18, Short.MAX_VALUE)
                        .addComponent(btnGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbInversa)))
                .addGap(23, 23, 23))
        );

        pnlGrafica.setName(""); // NOI18N

        javax.swing.GroupLayout pnlGraficaLayout = new javax.swing.GroupLayout(pnlGrafica);
        pnlGrafica.setLayout(pnlGraficaLayout);
        pnlGraficaLayout.setHorizontalGroup(
            pnlGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 856, Short.MAX_VALUE)
        );
        pnlGraficaLayout.setVerticalGroup(
            pnlGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        lblParametro1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblParametro1.setText("Parametro 1");

        txtParametro1.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N

        lblParametro2.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblParametro2.setText("Parametro 2");

        txtParametro2.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N

        lblParametro3.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        lblParametro3.setText("Parametro 3");

        txtParametro3.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtParametro1)
                    .addComponent(txtParametro2)
                    .addComponent(txtParametro3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblParametro1)
                            .addComponent(lblParametro2)
                            .addComponent(lblParametro3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblParametro1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtParametro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblParametro2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtParametro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblParametro3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtParametro3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlGrafica.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cambioColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambioColor
        fontSub=lblPoisson.getFont();
        font=lblPoisson.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblPoisson.setFont(fontSub.deriveFont(attributes));
        lblPoisson.setForeground(Color.blue);    
    }//GEN-LAST:event_cambioColor

    private void cambioColorExit(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambioColorExit
       
        Map attributes=lblPoisson.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblPoisson.setFont(font.deriveFont(attributes));
        lblPoisson.setForeground(Color.black);
        
    }//GEN-LAST:event_cambioColorExit

    private void cambioColorBinomial(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambioColorBinomial
        fontSub=lblBinomial.getFont();
        font=lblBinomial.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblBinomial.setFont(fontSub.deriveFont(attributes));
        lblBinomial.setForeground(Color.blue);    
    }//GEN-LAST:event_cambioColorBinomial

    private void cambioColorExitBinomial(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambioColorExitBinomial
        Map attributes=lblBinomial.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblBinomial.setFont(font.deriveFont(attributes));
        lblBinomial.setForeground(Color.black);
    }//GEN-LAST:event_cambioColorExitBinomial

    private void cambiarColorHiper(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambiarColorHiper
        fontSub=lblHiper.getFont();
        font=lblHiper.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblHiper.setFont(fontSub.deriveFont(attributes));
        lblHiper.setForeground(Color.blue); 
    }//GEN-LAST:event_cambiarColorHiper

    private void cambiarColorExitHiper(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambiarColorExitHiper
        Map attributes=lblHiper.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblHiper.setFont(font.deriveFont(attributes));
        lblHiper.setForeground(Color.black);
    }//GEN-LAST:event_cambiarColorExitHiper

    private void cambiarColorGeo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambiarColorGeo
        fontSub=lblGeometrica.getFont();
        font=lblGeometrica.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblGeometrica.setFont(fontSub.deriveFont(attributes));
        lblGeometrica.setForeground(Color.blue);
    }//GEN-LAST:event_cambiarColorGeo

    private void agregarColorExitGeo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitGeo
        Map attributes=lblGeometrica.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblGeometrica.setFont(font.deriveFont(attributes));
        lblGeometrica.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitGeo

    private void agregarColorPascal(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorPascal
        fontSub=lblUniforme.getFont();
        font=lblGeometrica.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblUniforme.setFont(fontSub.deriveFont(attributes));
        lblUniforme.setForeground(Color.blue); 
    }//GEN-LAST:event_agregarColorPascal

    private void agregarColorExitPascal(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitPascal
        Map attributes=lblUniforme.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblUniforme.setFont(font.deriveFont(attributes));
        lblUniforme.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitPascal

    private void agregarColorExpo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExpo
        fontSub=lblExpo.getFont();
        font=lblExpo.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblExpo.setFont(fontSub.deriveFont(attributes));
        lblExpo.setForeground(Color.blue);
    }//GEN-LAST:event_agregarColorExpo

    private void agregarColorExitExpo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitExpo
        Map attributes=lblExpo.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblExpo.setFont(font.deriveFont(attributes));
        lblExpo.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitExpo

    private void agregarColorNormal(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorNormal
        fontSub=lblNormal.getFont();
        font=lblNormal.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblNormal.setFont(fontSub.deriveFont(attributes));
        lblNormal.setForeground(Color.blue);
    }//GEN-LAST:event_agregarColorNormal

    private void agregarColorExitNormal(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitNormal
        Map attributes=lblNormal.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblNormal.setFont(font.deriveFont(attributes));
        lblNormal.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitNormal

    private void agregarColorLog(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorLog
        fontSub=lblLog.getFont();
        font=lblLog.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblLog.setFont(fontSub.deriveFont(attributes));
        lblLog.setForeground(Color.blue);
    }//GEN-LAST:event_agregarColorLog

    private void agregarColorExitLog(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitLog
        Map attributes=lblLog.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblLog.setFont(font.deriveFont(attributes));
        lblLog.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitLog

    private void agregarColorBeta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorBeta
        fontSub=lblBeta.getFont();
        font=lblBeta.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblBeta.setFont(fontSub.deriveFont(attributes));
        lblBeta.setForeground(Color.blue);
    }//GEN-LAST:event_agregarColorBeta

    private void colorAgregarExitBeta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorAgregarExitBeta
        Map attributes=lblBeta.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblBeta.setFont(font.deriveFont(attributes));
        lblBeta.setForeground(Color.black);
    }//GEN-LAST:event_colorAgregarExitBeta

    private void agregarColorGamma(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorGamma
        fontSub=lblGamma.getFont();
        font=lblGamma.getFont();
        
        Map attributes=fontSub.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        
        lblGamma.setFont(fontSub.deriveFont(attributes));
        lblGamma.setForeground(Color.blue);
    }//GEN-LAST:event_agregarColorGamma

    private void agregarColorExitGamma(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarColorExitGamma
        Map attributes=lblGamma.getFont().getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
        lblGamma.setFont(font.deriveFont(attributes));
        lblGamma.setForeground(Color.black);
    }//GEN-LAST:event_agregarColorExitGamma

    private void btnGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficaActionPerformed
        switch(numDistribucion){
            case 1:
                generarDatosPoisson();
                break;
            case 2:
                generarDatosBinomial();
                break;
            case 3:
                generarDatosHipergeo();
                break;
            case 4:
                generarDatosGeometrica();
                break;
            case 5:
                generarDatosUniforme();
                break;
            case 6:
                generarDatosExponencial();
                break;
            case 7:
                generarDatosNormal();
                break;
            case 8:
                 generarDatosLogNormal();
                break;
            case 9:
                generarDatosBeta();
                break;
            case 10:
                generarDatosGamma();
                break;
            default:
                JOptionPane.showMessageDialog(this, "No se ha elegido ninguna distribucion", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }
    }//GEN-LAST:event_btnGraficaActionPerformed

    private void lblPoissonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPoissonMouseClicked
        lblParametro1.setText("Lambda");
        lblParametro1.setVisible(true);
        txtParametro1.setText("");
        txtParametro1.setVisible(true);
        lblParametro2.setVisible(false);
        txtParametro2.setVisible(false);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion = 1;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblPoissonMouseClicked

    private void lblBetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBetaMouseClicked
        lblParametro1.setText("Alpha");
        lblParametro1.setVisible(true);
        txtParametro1.setText("");
        txtParametro1.setVisible(true);
        lblParametro2.setText("Beta");
        lblParametro2.setVisible(true);
        txtParametro2.setText("");
        txtParametro2.setVisible(true);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion = 9;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblBetaMouseClicked

    private void lblNormalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNormalMouseClicked
        lblParametro1.setText("Media");
        lblParametro1.setVisible(true);
        txtParametro1.setText("");
        txtParametro1.setVisible(true);
        lblParametro2.setText("Desviacion estandar");
        lblParametro2.setVisible(true);
        txtParametro2.setText("");
        txtParametro2.setVisible(true);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion = 7;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblNormalMouseClicked

    private void rb4200MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb4200MouseClicked
        cantPuntos = 4200;
    }//GEN-LAST:event_rb4200MouseClicked

    private void rb8000MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb8000MouseClicked
        cantPuntos = 8000;
    }//GEN-LAST:event_rb8000MouseClicked

    private void rb10000MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb10000MouseClicked
        cantPuntos = 10000;
    }//GEN-LAST:event_rb10000MouseClicked

    private void rb12000MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb12000MouseClicked
        cantPuntos = 12000;
    }//GEN-LAST:event_rb12000MouseClicked

    private void lblBinomialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBinomialMouseClicked
        lblParametro1.setText("Número de pruebas");
        lblParametro2.setText("Probabilidad de éxito");
        txtParametro1.setText("");
        txtParametro2.setText("");
        lblParametro1.setVisible(true);
        lblParametro2.setVisible(true);
        lblParametro3.setVisible(false);
        txtParametro1.setVisible(true);
        txtParametro2.setVisible(true);
        txtParametro3.setVisible(false);
        numDistribucion = 2;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblBinomialMouseClicked

    private void lblHiperMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHiperMouseClicked
        lblParametro1.setText("Tamaño de la población");//mayor o igual a 1
        lblParametro2.setText("Numero de éxitos");//entre 1 y poblacion inclusiva
        lblParametro3.setText("Numero de pruebas");//entre 1 y poblacion inclusiva
        txtParametro1.setText("");
        txtParametro2.setText("");
        txtParametro3.setText("");
        lblParametro1.setVisible(true);
        lblParametro2.setVisible(true);
        lblParametro3.setVisible(true);
        txtParametro1.setVisible(true);
        txtParametro2.setVisible(true);
        txtParametro3.setVisible(true);
        numDistribucion = 3;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblHiperMouseClicked

    private void lblGammaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGammaMouseClicked
        lblParametro1.setText("Escala");//mayor a 0
        lblParametro2.setText("Forma");//mayor a 0
        txtParametro1.setText("");
        txtParametro2.setText("");
        lblParametro1.setVisible(true);
        lblParametro2.setVisible(true);
        lblParametro3.setVisible(false);
        txtParametro1.setVisible(true);
        txtParametro2.setVisible(true);
        txtParametro3.setVisible(false);
        numDistribucion = 10;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblGammaMouseClicked

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
        List<Integer> yI = new ArrayList<Integer>();
        List<Double> yD = new ArrayList<Double>();
        String nombre = "";
        int dist = 0;
        try{
            switch(numDistribucion){
                case 1:
                    yI = poisson.inverse(x);
                    nombre = "poisson.csv";
                    dist = 1;
                    break;
                case 2:
                    yI = binomial.inverse(x);
                    nombre = "binomial.csv";
                    dist = 1;
                    break;
                case 3:
                    yI = hiperg.inverse(x);
                    nombre = "hiperg.csv";
                    dist = 1;
                    break;
                case 4:
                    yI = geometrica.inverse(x);
                    nombre = "geometrica.csv";
                    dist = 1;
                    break;
                case 5:
                    yI = uniforme.inverse(x);
                    nombre = "uniforme.csv";
                    dist = 1;
                    break;
                case 6:
                    yD = exponencial.inverse(x);
                    nombre = "exponencial.csv";
                    dist = 2;
                    break;
                case 7:
                    yD = normal.inverse(x);
                    nombre = "normal.csv";
                    dist = 2;
                    break;
                case 8:
                    yD = logNormal.inverse(x);
                    nombre = "logNormal.csv";
                    dist = 2;
                    break;
                case 9:
                    yD = beta.inverse(x);
                    nombre = "beta.csv";
                    dist = 2;
                    break;
                case 10:
                    yD = gamma.inverse(x);
                    nombre = "gamma.csv";
                    dist = 2;
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "No se ha elegido ninguna distribución", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Asegúrese de haber seleccionado una distribución y que ya la haya graficado previamente", "Error", JOptionPane.ERROR_MESSAGE);
            }
        try{
          
            CsvWriter csvW = new CsvWriter(nombre);
            if(dist == 1){
                for(Integer val : yI){
                    try {
                        String [] datos = {(val+"")};
                        csvW.writeRecord(datos);
                    } catch (Exception ex) {
                        Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }else{
                for(Double val : yD){
                    try {
                        String [] datos = {(val+"")};
                        csvW.writeRecord(datos);
                    } catch (Exception ex) {
                        Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }        
            csvW.close();
            JOptionPane.showMessageDialog(this, "Los datos se han exportado exitosamente.");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Algo salió mal al exportar. Intente de nuevo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void lblGeometricaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGeometricaMouseClicked
        lblParametro1.setText("Probabilidad de Exito");
        txtParametro1.setText("");
        lblParametro1.setVisible(true);
        txtParametro1.setVisible(true);
        lblParametro2.setVisible(false);
        txtParametro2.setVisible(false);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion=4;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblGeometricaMouseClicked

    private void lblExpoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExpoMouseClicked
        lblParametro1.setText("Lambda");
        txtParametro1.setText("");
        lblParametro1.setVisible(true);
        txtParametro1.setVisible(true);
        lblParametro2.setVisible(false);
        txtParametro2.setVisible(false);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion=6;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblExpoMouseClicked

    private void lblLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogMouseClicked
        lblParametro1.setText("Media");
        txtParametro1.setText("");
        lblParametro1.setVisible(true);
        txtParametro1.setVisible(true);
        lblParametro2.setText("Desviación Estándar");
        txtParametro2.setText("");
        lblParametro2.setVisible(true);
        txtParametro2.setVisible(true);
        lblParametro3.setVisible(false);
        txtParametro3.setVisible(false);
        numDistribucion=8;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblLogMouseClicked

    private void lblUniformeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUniformeMouseClicked
        numDistribucion=5;
        pnlGrafica.removeAll();
    }//GEN-LAST:event_lblUniformeMouseClicked
    
    private void generarDatosPoisson(){
        double valLambda;
        try{
            valLambda = Double.parseDouble(txtParametro1.getText().trim());
            poisson = new PoissonRandomVariable(valLambda);
            if(rbDensidad.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = poisson.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = poisson.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Integer> y = poisson.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void generarDatosBinomial(){
        int n=0; double p=0;
        try{
            n = Integer.parseInt(txtParametro1.getText().toString().trim());
            p = Double.parseDouble(txtParametro2.getText().toString().trim());
            binomial = new BinomialRandomVariables(p, n);
            if(rbDensidad.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = binomial.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = binomial.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> probabilidad = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> x = probabilidad;
                List<Integer> y = binomial.inverse(probabilidad);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }  
    }
    
    private void generarDatosHipergeo(){
        int tPoblacion=0, r=0, n=0;
        try{
            tPoblacion = Integer.parseInt(txtParametro1.getText().toString().trim());
            n = Integer.parseInt(txtParametro3.getText().toString().trim());
            r = Integer.parseInt(txtParametro2.getText().toString().trim());
            hiperg = new HipergeometricaRandomVariables(tPoblacion, r, n);
            if(rbDensidad.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = hiperg.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = hiperg.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> probabilidad = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> x = probabilidad;
                List<Integer> y = hiperg.inverse(probabilidad);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }
    
    private void generarDatosBeta(){
        double valAlpha, valBeta;
        try{
            valAlpha = Double.parseDouble(txtParametro1.getText().trim());
            valBeta = Double.parseDouble(txtParametro2.getText().trim());
            beta = new BetaRandomVariables(valAlpha, valBeta);
            if(rbDensidad.isSelected()){
                double aumento = 1.0/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<=1.0; i+=aumento)
                    x.add(i);
                List<Double> y = beta.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                double aumento = 1.0/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<=1.0; i+=aumento)
                    x.add(i);
                List<Double> y = beta.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> y = beta.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void generarDatosNormal(){
       double valMedia, valDesv;
        try{
            valMedia = Double.parseDouble(txtParametro1.getText().trim());
            valDesv = Double.parseDouble(txtParametro2.getText().trim());
            normal = new NormalRandomVariable(valMedia, valDesv);
            if(rbDensidad.isSelected()){
                double limInf = valMedia - 4.0 * valDesv;
                double limSup = valMedia + 4.0 * valDesv;
                double aumento = (limSup-limInf)/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=limInf; i<=limSup; i+=aumento)
                    x.add(i);
                List<Double> y = normal.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                double limInf = valMedia - 4.0 * valDesv;
                double limSup = valMedia + 4.0 * valDesv;
                double aumento = (limSup-limInf)/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=limInf; i<=limSup; i+=aumento)
                    x.add(i);
                List<Double> y = normal.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> y = normal.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } 
   
    private void generarDatosGamma(){
        double escala, forma;
        try{
            escala = Double.parseDouble(txtParametro1.getText().trim());
            forma = Double.parseDouble(txtParametro2.getText().trim());
            gamma = new GammaRandomVariables(forma, escala);
            if(rbDensidad.isSelected()){
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = gamma.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = gamma.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> y = gamma.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
   
    private void generarDatosExponencial(){
        double valLambda;
        try{
            valLambda = Double.parseDouble(txtParametro1.getText().trim());
            exponencial = new ExponencialRandomVariables(valLambda);
            if(rbDensidad.isSelected()){
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = exponencial.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));

                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Double> x = new ArrayList<Double>();
                for(double i=0.0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = exponencial.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> y = exponencial.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
       
    private void generarDatosGeometrica(){
        double valP;
        try{
            valP = Double.parseDouble(txtParametro1.getText().trim());
            geometrica = new GeometricaRandomVariables(valP);
            if(rbDensidad.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = geometrica.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<=cantPuntos; i++)
                    x.add(i);
                List<Double> y = geometrica.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Integer> y = geometrica.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos. \n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
     
    private void generarDatosLogNormal(){
        double valMedia, valDesv;
        try{
            valMedia = Double.parseDouble(txtParametro1.getText().trim());
            valDesv = Double.parseDouble(txtParametro2.getText().trim());
            logNormal = new LognormalRandomVariables(valMedia, valDesv);
            if(rbDensidad.isSelected()){
                double limInf = valMedia - 4.0 * valDesv;
                double limSup = valMedia + 4.0 * valDesv;
                double aumento = (limSup-limInf)/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=limInf; i<=limSup; i+=aumento)
                    x.add(i);
                List<Double> y = logNormal.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++) 
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                double limInf = valMedia - 4.0 * valDesv;
                double limSup = valMedia + 4.0 * valDesv;
                double aumento = (limSup-limInf)/cantPuntos;
                List<Double> x = new ArrayList<Double>();
                for(double i=limInf; i<=limSup; i+=aumento)
                    x.add(i);
                List<Double> y = logNormal.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Double> y = logNormal.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
      
    private void generarDatosUniforme(){
        try{
            uniforme = new UniformeDiscretaRandomVariables(1, cantPuntos);
            if(rbDensidad.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = uniforme.density(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else if(rbAcumulada.isSelected()){
                List<Integer> x = new ArrayList<Integer>();
                for(int i=0; i<cantPuntos; i++)
                    x.add(i);
                List<Double> y = uniforme.cumulative(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            } else{
                List<Double> x = (new CongruencialMixto(3, 13, 11, 430000)).valoresReales(cantPuntos);
                List<Integer> y = uniforme.inverse(x);
                XYSeries datos=new XYSeries("");
                for(int i=0; i<cantPuntos; i++)
                    datos.add(x.get(i), y.get(i));
                graficar(datos);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Valores incorrectos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void graficar(XYSeries datos){
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(datos);
        JFreeChart grafica=ChartFactory.createXYLineChart("Grafico", "x", "y", dataset, PlotOrientation.VERTICAL, true, true, false);
        /*XYPlot plot = (XYPlot) grafica.getPlot();
        XYLineAndShapeRenderer renderer= (XYLineAndShapeRenderer) plot.getRenderer();
        plot.getRangeAxis().setRange(0.0, 1.6);*/

        //grafica.setBackgroundPaint(new Color(192, 192, 242));
        ChartPanel chartPanel = new ChartPanel(grafica);
        pnlGrafica.removeAll();
        pnlGrafica.setLayout(new java.awt.BorderLayout());
        pnlGrafica.add(chartPanel, BorderLayout.CENTER);
        pnlGrafica.validate();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnGrafica;
    private javax.swing.ButtonGroup group1;
    private javax.swing.ButtonGroup group2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblBeta;
    private javax.swing.JLabel lblBinomial;
    private javax.swing.JLabel lblExpo;
    private javax.swing.JLabel lblGamma;
    private javax.swing.JLabel lblGeometrica;
    private javax.swing.JLabel lblHiper;
    private javax.swing.JLabel lblLog;
    private javax.swing.JLabel lblNormal;
    private javax.swing.JLabel lblParametro1;
    private javax.swing.JLabel lblParametro2;
    private javax.swing.JLabel lblParametro3;
    private javax.swing.JLabel lblPoisson;
    private javax.swing.JLabel lblUniforme;
    private javax.swing.JPanel pnlGrafica;
    private javax.swing.JRadioButton rb10000;
    private javax.swing.JRadioButton rb12000;
    private javax.swing.JRadioButton rb4200;
    private javax.swing.JRadioButton rb8000;
    private javax.swing.JRadioButton rbAcumulada;
    private javax.swing.JRadioButton rbDensidad;
    private javax.swing.JRadioButton rbInversa;
    private javax.swing.JTextField txtParametro1;
    private javax.swing.JTextField txtParametro2;
    private javax.swing.JTextField txtParametro3;
    // End of variables declaration//GEN-END:variables
}
